generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Habit {
    name     String  @id
    archived Boolean @default(false)

    dailyReport DailyReport @relation(fields: [userId, reportDate], references: [userId, date])
    userId      String
    reportDate  DateTime

    habitLogs HabitLog[]
}

model HabitLog {
    completed Boolean @default(false)

    habit     Habit  @relation(fields: [habitName], references: [name])
    habitName String

    dailyReport DailyReport @relation(fields: [userId, reportDate], references: [userId, date])
    userId      String
    reportDate  DateTime

    @@id([userId, reportDate, habitName])
}

model Task {
    id        Int     @id @default(autoincrement())
    name      String
    completed Boolean @default(false)

    dailyReport DailyReport @relation(fields: [userId, reportDate], references: [userId, date])
    userId      String
    reportDate  DateTime
}

enum MoodState {
    GREAT
    GOOD
    OKAY
    BAD
    TERRIBLE
}

model DailyReport {
    date   DateTime
    habits Habit[]
    tasks  Task[]

    mood MoodState?

    user      User       @relation(fields: [userId], references: [id])
    userId    String
    habitLogs HabitLog[]

    @@id([userId, date])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    reports DailyReport[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
